{
  "uuid": "1b341b7b-d11c-41a2-95ff-a6a4b4e1cda9",
  "type": "sentry",
  "payload": {
    "event_id": "7a7a24792347409a916263c37cd13137",
    "timestamp": 1673266950.415307,
    "platform": "php",
    "sdk": { "name": "sentry.php.spiral", "version": "3.1.2" },
    "logger": "php",
    "server_name": "ButschsterLpp",
    "environment": "production",
    "modules": {
      "brick/math": "0.10.2",
      "clue/stream-filter": "v1.6.0",
      "cocur/slugify": "v3.2",
      "codedungeon/php-cli-colors": "1.12.2",
      "composer/semver": "3.3.2",
      "cycle/annotated": "v3.2.0",
      "cycle/database": "2.2.2",
      "cycle/migrations": "v4.0.0",
      "cycle/orm": "v2.2.1",
      "cycle/schema-builder": "v2.1.0",
      "cycle/schema-migrations-generator": "3.x-dev@df0e391",
      "cycle/schema-renderer": "1.2.0",
      "defuse/php-encryption": "v2.3.1",
      "doctrine/annotations": "1.14.1",
      "doctrine/collections": "1.8.0",
      "doctrine/deprecations": "v1.0.0",
      "doctrine/inflector": "2.0.6",
      "doctrine/instantiator": "1.4.1",
      "doctrine/lexer": "1.2.3",
      "egulias/email-validator": "3.2.1",
      "filp/whoops": "2.14.6",
      "google/common-protos": "v3.1.0",
      "google/protobuf": "v3.21.12",
      "graham-campbell/result-type": "v1.1.0",
      "guzzlehttp/promises": "1.5.2",
      "guzzlehttp/psr7": "2.4.3",
      "hamcrest/hamcrest-php": "v2.0.1",
      "illuminate/collections": "v9.44.0",
      "illuminate/conditionable": "v9.44.0",
      "illuminate/contracts": "v9.44.0",
      "illuminate/macroable": "v9.44.0",
      "illuminate/pipeline": "v9.44.0",
      "illuminate/support": "v9.44.0",
      "inspector-apm/inspector-php": "3.7.18",
      "jean85/pretty-package-versions": "2.0.5",
      "league/flysystem": "2.5.0",
      "league/mime-type-detection": "1.11.0",
      "mockery/mockery": "1.5.1",
      "monolog/monolog": "2.8.0",
      "myclabs/deep-copy": "1.11.0",
      "nesbot/carbon": "2.64.0",
      "nette/php-generator": "v4.0.5",
      "nette/utils": "v3.2.8",
      "nikic/php-parser": "v4.15.2",
      "nunomaduro/collision": "v6.3.1",
      "nyholm/psr7": "1.5.1",
      "nyholm/psr7-server": "1.0.2",
      "opis/closure": "3.6.3",
      "paragonie/random_compat": "v9.99.100",
      "phar-io/manifest": "2.0.3",
      "phar-io/version": "3.2.1",
      "php-http/client-common": "2.6.0",
      "php-http/curl-client": "2.2.1",
      "php-http/discovery": "1.14.3",
      "php-http/httplug": "2.3.0",
      "php-http/message": "1.13.0",
      "php-http/message-factory": "v1.0.2",
      "php-http/promise": "1.1.0",
      "phpoption/phpoption": "1.9.0",
      "phpunit/php-code-coverage": "9.2.22",
      "phpunit/php-file-iterator": "3.0.6",
      "phpunit/php-invoker": "3.1.1",
      "phpunit/php-text-template": "2.0.4",
      "phpunit/php-timer": "5.0.3",
      "phpunit/phpunit": "9.5.27",
      "psr/cache": "3.0.0",
      "psr/container": "2.0.2",
      "psr/event-dispatcher": "1.0.0",
      "psr/http-client": "1.0.1",
      "psr/http-factory": "1.0.1",
      "psr/http-message": "1.0.1",
      "psr/http-server-handler": "1.0.1",
      "psr/http-server-middleware": "1.0.1",
      "psr/log": "3.0.0",
      "psr/simple-cache": "3.0.0",
      "ralouphie/getallheaders": "3.0.3",
      "ramsey/collection": "1.2.2",
      "ramsey/uuid": "4.6.0",
      "roadrunner-php/app-logger": "1.0.0",
      "roadrunner-php/centrifugo": "1.0.0",
      "sebastian/cli-parser": "1.0.1",
      "sebastian/code-unit": "1.0.8",
      "sebastian/code-unit-reverse-lookup": "2.0.3",
      "sebastian/comparator": "4.0.8",
      "sebastian/complexity": "2.0.2",
      "sebastian/diff": "4.0.4",
      "sebastian/environment": "5.1.4",
      "sebastian/exporter": "4.0.5",
      "sebastian/global-state": "5.0.5",
      "sebastian/lines-of-code": "1.0.3",
      "sebastian/object-enumerator": "4.0.4",
      "sebastian/object-reflector": "2.0.4",
      "sebastian/recursion-context": "4.0.4",
      "sebastian/resource-operations": "3.0.3",
      "sebastian/type": "3.2.0",
      "sebastian/version": "3.0.2",
      "sentry/sentry": "3.12.0",
      "spatie/backtrace": "1.2.1",
      "spatie/flare-client-php": "1.3.1",
      "spatie/ignition": "1.4.1",
      "spiral-packages/ignition-bridge": "1.0.1",
      "spiral-packages/profiler": "1.0.2",
      "spiral/app": "1.0.0+no-version-set@{no ref",
      "spiral/attributes": "v3.0.0",
      "spiral/composer-publish-plugin": "v1.1.2",
      "spiral/cycle-bridge": "v2.1.0",
      "spiral/data-grid": "v3.0.0",
      "spiral/data-grid-bridge": "v3.0.1",
      "spiral/filters-bridge": "1.0.1",
      "spiral/framework": "3.4.0",
      "spiral/goridge": "v3.2.0",
      "spiral/nyholm-bridge": "v1.3.0",
      "spiral/profiler": "3.0.x-dev@a060b99",
      "spiral/roadrunner": "v2.12.1",
      "spiral/roadrunner-bridge": "2.3.2",
      "spiral/roadrunner-broadcast": "v2.1.0",
      "spiral/roadrunner-cli": "v2.4.0",
      "spiral/roadrunner-grpc": "v2.0.1",
      "spiral/roadrunner-http": "v2.2.0",
      "spiral/roadrunner-jobs": "v2.6.0",
      "spiral/roadrunner-kv": "v3.0.0",
      "spiral/roadrunner-metrics": "v2.0.1",
      "spiral/roadrunner-tcp": "v2.0.1",
      "spiral/roadrunner-worker": "v2.3.0",
      "spiral/sapi-bridge": "1.0.1",
      "spiral/sentry-bridge": "v2.1.0",
      "spiral/testing": "2.2.0",
      "spiral/validator": "1.2.0",
      "symfony/console": "v6.2.2",
      "symfony/deprecation-contracts": "v3.2.0",
      "symfony/event-dispatcher": "v6.2.2",
      "symfony/event-dispatcher-contracts": "v3.2.0",
      "symfony/finder": "v6.2.0",
      "symfony/http-client": "v6.2.2",
      "symfony/http-client-contracts": "v3.1.1",
      "symfony/http-foundation": "v6.2.2",
      "symfony/mailer": "v6.2.2",
      "symfony/mime": "v6.2.2",
      "symfony/options-resolver": "v6.2.0",
      "symfony/polyfill-ctype": "v1.27.0",
      "symfony/polyfill-intl-grapheme": "v1.27.0",
      "symfony/polyfill-intl-idn": "v1.27.0",
      "symfony/polyfill-intl-normalizer": "v1.27.0",
      "symfony/polyfill-mbstring": "v1.27.0",
      "symfony/polyfill-php72": "v1.27.0",
      "symfony/polyfill-php80": "v1.27.0",
      "symfony/polyfill-php81": "v1.27.0",
      "symfony/process": "v6.2.0",
      "symfony/service-contracts": "v3.2.0",
      "symfony/string": "v6.2.2",
      "symfony/translation": "v6.2.2",
      "symfony/translation-contracts": "v3.2.0",
      "symfony/var-dumper": "v6.2.2",
      "symfony/yaml": "v6.2.2",
      "theseer/tokenizer": "1.2.1",
      "vlucas/phpdotenv": "v5.5.0",
      "voku/portable-ascii": "2.0.1",
      "yiisoft/friendly-exception": "1.1.0"
    },
    "extra": {
      "environment": {
        "SHELL": "/bin/bash",
        "WSL2_GUI_APPS_ENABLED": "1",
        "WSL_DISTRO_NAME": "Ubuntu-22.04",
        "NODE_OPTIONS": "--openssl-legacy-provider",
        "NAME": "ButschsterLpp",
        "PWD": "/root/repos/spiral-apps/filters-bridge",
        "LOGNAME": "root",
        "HOME": "/root",
        "LANG": "C.UTF-8",
        "WSL_INTEROP": "/run/WSL/308_interop",
        "LS_COLORS": "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:",
        "WAYLAND_DISPLAY": "wayland-0",
        "LESSCLOSE": "/usr/bin/lesspipe %s %s",
        "TERM": "xterm-256color",
        "LESSOPEN": "| /usr/bin/lesspipe %s",
        "USER": "root",
        "DISPLAY": ":0",
        "SHLVL": "1",
        "COMPOSER_ALLOW_SUPERUSER": "1",
        "XDG_RUNTIME_DIR": "/mnt/wslg/runtime-dir",
        "WSLENV": "",
        "XDG_DATA_DIRS": "/usr/local/share:/usr/share:/var/lib/snapd/desktop",
        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0/:/mnt/c/WINDOWS/System32/OpenSSH/:/mnt/c/Program Files/dotnet/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/Users/butsc/AppData/Local/Microsoft/WindowsApps:/mnt/c/Program Files/JetBrains/PhpStorm 2022.2.2/bin:/mnt/c/Users/butsc/AppData/Local/Programs/Microsoft VS Code/bin:/snap/bin",
        "HOSTTYPE": "x86_64",
        "PULSE_SERVER": "/mnt/wslg/PulseServer",
        "_": "./rr",
        "RR_RELAY": "pipes",
        "RR_RPC": "tcp://127.0.0.1:6002",
        "RR_MODE": "http",
        "PHP_SELF": "app.php",
        "SCRIPT_NAME": "app.php",
        "SCRIPT_FILENAME": "app.php",
        "PATH_TRANSLATED": "app.php",
        "DOCUMENT_ROOT": "",
        "REQUEST_TIME_FLOAT": 1673266946.908353,
        "REQUEST_TIME": 1673266946,
        "argv": ["app.php"],
        "argc": 1,
        "APP_ENV": "local",
        "DEBUG": true,
        "ENCRYPTER_KEY": "def00000c7cb5691f7d052a7d4d1aea220b23db12a2a0f9d5be80c044e6cc5c2671d049decfe970c545c7d457f8e7edf2f979acefd988a926bcfa84dc042873db3a19dc6",
        "SAFE_MIGRATIONS": true,
        "QUEUE_CONNECTION": "sync",
        "MONOLOG_DEFAULT_CHANNEL": "socket",
        "MONOLOG_DEFAULT_LEVEL": "DEBUG",
        "MONOLOG_SOCKET_HOST": "127.0.0.1:9913",
        "CACHE_STORAGE": "local",
        "SESSION_LIFETIME": "86400",
        "SESSION_COOKIE": "sid",
        "MAILER_DSN": "smtp://127.0.0.1:1025",
        "MAILER_PIPELINE": "local",
        "MAILER_FROM": "Spiral <sendit@local.host>",
        "STORAGE_DEFAULT": "default",
        "CYCLE_SCHEMA_CACHE": true,
        "CYCLE_SCHEMA_WARMUP": false,
        "SENTRY_DSN": "http://tsfsdfsdfsdfcsdf@127.0.0.1:8082/1",
        "VAR_DUMPER_FORMAT": "server",
        "VAR_DUMPER_SERVER": "127.0.0.1:9912",
        "PROFILER_ENDPOINT": "http://127.0.0.1:8082/api/profiler/store",
        "PROFILER_APP_NAME": "My super app"
      },
      "headers": {
        "Host": ["127.0.0.1:8080"],
        "Sec-Fetch-Mode": ["navigate"],
        "Sec-Fetch-Dest": ["document"],
        "Accept-Encoding": ["gzip, deflate, br"],
        "Accept-Language": ["en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7,ka;q=0.6"],
        "Sec-Ch-Ua-Platform": ["\"Windows\""],
        "User-Agent": [
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"
        ],
        "Sec-Ch-Ua-Mobile": ["?0"],
        "Sec-Fetch-Site": ["none"],
        "Sec-Fetch-User": ["?1"],
        "Cookie": ["grafana_session=ba4107efb94c195a463e7780bcc25608"],
        "Connection": ["keep-alive"],
        "Upgrade-Insecure-Requests": ["1"],
        "Sec-Ch-Ua": [
          "\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Google Chrome\";v=\"108\""
        ],
        "Accept": [
          "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"
        ],
        "Cache-Control": ["max-age=0"]
      }
    },
    "tags": {
      "php": "8.1.2-1ubuntu2.8",
      "dispatcher": "Spiral\\RoadRunnerBridge\\Http\\Dispatcher",
      "method": "GET",
      "url": "http://127.0.0.1:8080/exception.html"
    },
    "contexts": {
      "os": {
        "name": "Linux",
        "version": "5.15.79.1-microsoft-standard-WSL2",
        "build": "#1 SMP Wed Nov 23 01:01:46 UTC 2022",
        "kernel_version": "Linux ButschsterLpp 5.15.79.1-microsoft-standard-WSL2 #1 SMP Wed Nov 23 01:01:46 UTC 2022 x86_64"
      },
      "runtime": { "name": "php", "version": "8.1.2" }
    },
    "exception": {
      "values": [
        {
          "type": "Spiral\\Core\\Exception\\Container\\NotFoundException",
          "value": "Can't resolve `foo`: undefined class or binding `foo`.\nContainer trace list:\n- action: 'autowire'\n  alias: 'foo'\n  context: NULL",
          "stacktrace": {
            "frames": [
              {
                "filename": "/app.php",
                "lineno": 28,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/app.php",
                "pre_context": [
                  "",
                  "if ($app === null) {",
                  "    exit(255);",
                  "}",
                  ""
                ],
                "context_line": "$code = (int)$app->serve();",
                "post_context": ["exit($code);", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Boot/src/AbstractKernel.php",
                "lineno": 274,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Boot/src/AbstractKernel.php",
                "function": "Spiral\\Boot\\AbstractKernel::serve",
                "raw_function": "Spiral\\Boot\\AbstractKernel::serve",
                "pre_context": [
                  "                return $this->container->runScope(",
                  "                    [DispatcherInterface::class => $dispatcher],",
                  "                    static function () use ($dispatcher, $eventDispatcher): mixed {",
                  "                        $eventDispatcher?->dispatch(new DispatcherFound($dispatcher));",
                  "                        return $dispatcher->serve();"
                ],
                "context_line": "                    }",
                "post_context": [
                  "                );",
                  "            }",
                  "        }",
                  "",
                  "        $eventDispatcher?->dispatch(new DispatcherNotFound());"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 160,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "            $this->binder->bind($alias, $resolver);",
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this"
                ],
                "context_line": "                ? ContainerScope::runScope($this, $scope)",
                "post_context": [
                  "                : $scope($this);",
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/ContainerScope.php",
                "lineno": 37,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/ContainerScope.php",
                "function": "Spiral\\Core\\ContainerScope::runScope",
                "raw_function": "Spiral\\Core\\ContainerScope::runScope",
                "pre_context": [
                  "    public static function runScope(ContainerInterface $container, callable $scope): mixed",
                  "    {",
                  "        [$previous, self::$container] = [self::$container, $container];",
                  "",
                  "        try {"
                ],
                "context_line": "            return $scope(self::$container);",
                "post_context": [
                  "        } finally {",
                  "            self::$container = $previous;",
                  "        }",
                  "    }",
                  "}"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Boot/src/AbstractKernel.php",
                "lineno": 273,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Boot/src/AbstractKernel.php",
                "function": "Spiral\\Boot\\AbstractKernel::Spiral\\Boot\\{closure}",
                "raw_function": "Spiral\\Boot\\AbstractKernel::Spiral\\Boot\\{closure}",
                "pre_context": [
                  "            if ($dispatcher->canServe()) {",
                  "                return $this->container->runScope(",
                  "                    [DispatcherInterface::class => $dispatcher],",
                  "                    static function () use ($dispatcher, $eventDispatcher): mixed {",
                  "                        $eventDispatcher?->dispatch(new DispatcherFound($dispatcher));"
                ],
                "context_line": "                        return $dispatcher->serve();",
                "post_context": [
                  "                    }",
                  "                );",
                  "            }",
                  "        }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/roadrunner-bridge/src/Http/Dispatcher.php",
                "lineno": 43,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/roadrunner-bridge/src/Http/Dispatcher.php",
                "function": "Spiral\\RoadRunnerBridge\\Http\\Dispatcher::serve",
                "raw_function": "Spiral\\RoadRunnerBridge\\Http\\Dispatcher::serve",
                "pre_context": [
                  "        /** @var Http $http */",
                  "        $http = $this->container->get(Http::class);",
                  "",
                  "        while ($request = $worker->waitRequest()) {",
                  "            try {"
                ],
                "context_line": "                $response = $http->handle($request);",
                "post_context": [
                  "                $worker->respond($response);",
                  "            } catch (\\Throwable $e) {",
                  "                $worker->respond($this->errorToResponse($e));",
                  "            } finally {",
                  "                $this->finalizer->finalize(false);"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Http.php",
                "lineno": 104,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Http.php",
                "function": "Spiral\\Http\\Http::handle",
                "raw_function": "Spiral\\Http\\Http::handle",
                "pre_context": [
                  "                'http.method' => $request->getMethod(),",
                  "                'http.url' => $request->getUri(),",
                  "                'http.headers' => $request->getHeaders(),",
                  "            ],",
                  "            scoped: true,"
                ],
                "context_line": "            traceKind: TraceKind::SERVER",
                "post_context": [
                  "        );",
                  "",
                  "        foreach ($tracer->getContext() as $key => $value) {",
                  "            $response = $response->withHeader($key, $value);",
                  "        }"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Http.php",
                "lineno": 74,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Http.php",
                "function": "Spiral\\Http\\Http::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Http::Spiral\\Http\\{closure}",
                "pre_context": [
                  "",
                  "            if ($this->handler === null) {",
                  "                throw new HttpException('Unable to run HttpCore, no handler is set.');",
                  "            }",
                  ""
                ],
                "context_line": "            $response = $this->pipeline->withHandler($this->handler)->handle($request);",
                "post_context": [
                  "",
                  "            $span",
                  "                ->setAttribute(",
                  "                    'http.status_code',",
                  "                    $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/app/src/Middleware/LocaleSelector.php",
                "lineno": 43,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/app/src/Middleware/LocaleSelector.php",
                "function": "App\\Middleware\\LocaleSelector::process",
                "raw_function": "App\\Middleware\\LocaleSelector::process",
                "pre_context": [
                  "                    $this->translator->setLocale($locale);",
                  "                    break;",
                  "                }",
                  "            }",
                  ""
                ],
                "context_line": "            return $handler->handle($request);",
                "post_context": [
                  "        } finally {",
                  "            // restore",
                  "            $this->translator->setLocale($defaultLocale);",
                  "        }",
                  "    }"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Middleware/ErrorHandlerMiddleware.php",
                "lineno": 43,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Middleware/ErrorHandlerMiddleware.php",
                "function": "Spiral\\Http\\Middleware\\ErrorHandlerMiddleware::process",
                "raw_function": "Spiral\\Http\\Middleware\\ErrorHandlerMiddleware::process",
                "pre_context": [
                  "     * @throws \\Throwable",
                  "     */",
                  "    public function process(Request $request, Handler $handler): Response",
                  "    {",
                  "        try {"
                ],
                "context_line": "            return $handler->handle($request);",
                "post_context": [
                  "        } catch (ClientException|RouterException $e) {",
                  "            $code = $e instanceof ClientException ? $e->getCode() : 404;",
                  "        } catch (\\Throwable $e) {",
                  "            $code = 500;",
                  "        }"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Middleware/JsonPayloadMiddleware.php",
                "lineno": 39,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Middleware/JsonPayloadMiddleware.php",
                "function": "Spiral\\Http\\Middleware\\JsonPayloadMiddleware::process",
                "raw_function": "Spiral\\Http\\Middleware\\JsonPayloadMiddleware::process",
                "pre_context": [
                  "                    throw new ClientException(400, 'invalid json payload');",
                  "                }",
                  "            }",
                  "        }",
                  ""
                ],
                "context_line": "        return $handler->handle($request);",
                "post_context": [
                  "    }",
                  "",
                  "    private function isJsonPayload(ServerRequestInterface $request): bool",
                  "    {",
                  "        $contentType = $request->getHeaderLine('Content-Type');"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Framework/Debug/StateCollector/HttpCollector.php",
                "lineno": 21,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Framework/Debug/StateCollector/HttpCollector.php",
                "function": "Spiral\\Debug\\StateCollector\\HttpCollector::process",
                "raw_function": "Spiral\\Debug\\StateCollector\\HttpCollector::process",
                "pre_context": [
                  "    private ?ServerRequestInterface $request = null;",
                  "",
                  "    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface",
                  "    {",
                  "        $this->request = $request;"
                ],
                "context_line": "        return $handler->handle($request);",
                "post_context": [
                  "    }",
                  "",
                  "    public function populate(StateInterface $state): void",
                  "    {",
                  "        if ($this->request === null) {"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 98,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],",
                  "            static fn (): Response => $handler->handle($request)"
                ],
                "context_line": "        );",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 97,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "        }",
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],"
                ],
                "context_line": "            static fn (): Response => $handler->handle($request)",
                "post_context": ["        );", "    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Router/src/Router.php",
                "lineno": 91,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Router/src/Router.php",
                "function": "Spiral\\Router\\Router::handle",
                "raw_function": "Spiral\\Router\\Router::handle",
                "pre_context": [
                  "                    ->withAttribute(self::ROUTE_MATCHES, $route->getMatches() ?? []);",
                  "",
                  "                $this->eventDispatcher?->dispatch(new RouteMatched($request, $route));",
                  "",
                  "                return $route->handle($request);"
                ],
                "context_line": "            }",
                "post_context": [
                  "        );",
                  "    }",
                  "",
                  "    public function setRoute(string $name, RouteInterface $route): void",
                  "    {"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Router/src/Router.php",
                "lineno": 90,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Router/src/Router.php",
                "function": "Spiral\\Router\\Router::Spiral\\Router\\{closure}",
                "raw_function": "Spiral\\Router\\Router::Spiral\\Router\\{closure}",
                "pre_context": [
                  "                    ->withAttribute(self::ROUTE_NAME, $routeName)",
                  "                    ->withAttribute(self::ROUTE_MATCHES, $route->getMatches() ?? []);",
                  "",
                  "                $this->eventDispatcher?->dispatch(new RouteMatched($request, $route));",
                  ""
                ],
                "context_line": "                return $route->handle($request);",
                "post_context": [
                  "            }",
                  "        );",
                  "    }",
                  "",
                  "    public function setRoute(string $name, RouteInterface $route): void"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Router/src/Route.php",
                "lineno": 120,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Router/src/Route.php",
                "function": "Spiral\\Router\\Route::handle",
                "raw_function": "Spiral\\Router\\Route::handle",
                "pre_context": [
                  "            $this->requestHandler = $this->requestHandler();",
                  "        }",
                  "",
                  "        return $this->pipeline->process(",
                  "            $request->withAttribute(self::ROUTE_ATTRIBUTE, $this),"
                ],
                "context_line": "            $this->requestHandler",
                "post_context": [
                  "        );",
                  "    }",
                  "",
                  "    /**",
                  "     * @throws RouteException"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 55,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::process",
                "raw_function": "Spiral\\Http\\Pipeline::process",
                "pre_context": [
                  "        return $pipeline;",
                  "    }",
                  "",
                  "    public function process(Request $request, RequestHandlerInterface $handler): Response",
                  "    {"
                ],
                "context_line": "        return $this->withHandler($handler)->handle($request);",
                "post_context": [
                  "    }",
                  "",
                  "    public function handle(Request $request): Response",
                  "    {",
                  "        if ($this->handler === null) {"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 55,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::process",
                "raw_function": "Spiral\\Http\\Pipeline::process",
                "pre_context": [
                  "        return $pipeline;",
                  "    }",
                  "",
                  "    public function process(Request $request, RequestHandlerInterface $handler): Response",
                  "    {"
                ],
                "context_line": "        return $this->withHandler($handler)->handle($request);",
                "post_context": [
                  "    }",
                  "",
                  "    public function handle(Request $request): Response",
                  "    {",
                  "        if ($this->handler === null) {"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/profiler/src/ProfilerMiddleware.php",
                "lineno": 37,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/profiler/src/ProfilerMiddleware.php",
                "function": "Spiral\\Profiler\\ProfilerMiddleware::process",
                "raw_function": "Spiral\\Profiler\\ProfilerMiddleware::process",
                "pre_context": [
                  "        ]);",
                  "",
                  "        $profiler->start();",
                  "",
                  "        try {"
                ],
                "context_line": "            return $handler->handle($request);",
                "post_context": [
                  "        } finally {",
                  "            $state = $this->container->has(StateInterface::class)",
                  "                ? $this->container->get(StateInterface::class)",
                  "                : new State();",
                  "            $ispatcher = $this->container->get(DispatcherInterface::class);"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 89,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "                    return $response;",
                  "                },",
                  "                scoped: true,",
                  "                attributes: ["
                ],
                "context_line": "                    'http.middleware' => $middleware::class,",
                "post_context": [
                  "                ]",
                  "            );",
                  "        }",
                  "",
                  "        $handler = $this->handler;"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "            $this->dispatcher?->dispatch(new MiddlewareProcessing($request, $middleware));",
                  "",
                  "            return $this->tracer->trace(",
                  "                name: \\sprintf('Middleware processing [%s]', $middleware::class),",
                  "                callback: function (SpanInterface $span) use ($request, $middleware): Response {"
                ],
                "context_line": "                    $response = $middleware->process($request, $this);",
                "post_context": [
                  "",
                  "                    $span",
                  "                        ->setAttribute(",
                  "                            'http.status_code',",
                  "                            $response->getStatusCode()"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 55,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::process",
                "raw_function": "Spiral\\Http\\Pipeline::process",
                "pre_context": [
                  "        return $pipeline;",
                  "    }",
                  "",
                  "    public function process(Request $request, RequestHandlerInterface $handler): Response",
                  "    {"
                ],
                "context_line": "        return $this->withHandler($handler)->handle($request);",
                "post_context": [
                  "    }",
                  "",
                  "    public function handle(Request $request): Response",
                  "    {",
                  "        if ($this->handler === null) {"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 98,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],",
                  "            static fn (): Response => $handler->handle($request)"
                ],
                "context_line": "        );",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 97,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "        }",
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],"
                ],
                "context_line": "            static fn (): Response => $handler->handle($request)",
                "post_context": ["        );", "    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 98,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],",
                  "            static fn (): Response => $handler->handle($request)"
                ],
                "context_line": "        );",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 97,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "        }",
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],"
                ],
                "context_line": "            static fn (): Response => $handler->handle($request)",
                "post_context": ["        );", "    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 98,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::handle",
                "raw_function": "Spiral\\Http\\Pipeline::handle",
                "pre_context": [
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],",
                  "            static fn (): Response => $handler->handle($request)"
                ],
                "context_line": "        );",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "lineno": 97,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Http/src/Pipeline.php",
                "function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "raw_function": "Spiral\\Http\\Pipeline::Spiral\\Http\\{closure}",
                "pre_context": [
                  "        }",
                  "",
                  "        $handler = $this->handler;",
                  "        return $this->scope->runScope(",
                  "            [Request::class => $request],"
                ],
                "context_line": "            static fn (): Response => $handler->handle($request)",
                "post_context": ["        );", "    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Router/src/CoreHandler.php",
                "lineno": 104,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Router/src/CoreHandler.php",
                "function": "Spiral\\Router\\CoreHandler::handle",
                "raw_function": "Spiral\\Router\\CoreHandler::handle",
                "pre_context": [
                  "                        'route.controller' => $this->controller,",
                  "                        'route.action' => $action,",
                  "                        'route.parameters' => \\array_keys($this->parameters),",
                  "                    ]",
                  "                )"
                ],
                "context_line": "            );",
                "post_context": [
                  "        } catch (ControllerException $e) {",
                  "            \\ob_get_clean();",
                  "            throw $this->mapException($e);",
                  "        } catch (\\Throwable $e) {",
                  "            \\ob_get_clean();"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Router/src/CoreHandler.php",
                "lineno": 101,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Router/src/CoreHandler.php",
                "function": "Spiral\\Router\\CoreHandler::Spiral\\Router\\{closure}",
                "raw_function": "Spiral\\Router\\CoreHandler::Spiral\\Router\\{closure}",
                "pre_context": [
                  "                        parameters: $this->parameters",
                  "                    ),",
                  "                    attributes: [",
                  "                        'route.controller' => $this->controller,",
                  "                        'route.action' => $action,"
                ],
                "context_line": "                        'route.parameters' => \\array_keys($this->parameters),",
                "post_context": [
                  "                    ]",
                  "                )",
                  "            );",
                  "        } catch (ControllerException $e) {",
                  "            \\ob_get_clean();"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "lineno": 25,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/NullTracer.php",
                "function": "Spiral\\Telemetry\\NullTracer::trace",
                "raw_function": "Spiral\\Telemetry\\NullTracer::trace",
                "pre_context": [
                  "        ?int $startTime = null",
                  "    ): mixed {",
                  "        $span = new Span($name);",
                  "        $span->setAttributes($attributes);",
                  ""
                ],
                "context_line": "        return $this->runScope($span, $callback);",
                "post_context": [
                  "    }",
                  "",
                  "    public function getContext(): array",
                  "    {",
                  "        return [];"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::runScope",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 161,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::runScope",
                "raw_function": "Spiral\\Core\\Container::runScope",
                "pre_context": [
                  "        }",
                  "",
                  "        try {",
                  "            return ContainerScope::getContainer() !== $this",
                  "                ? ContainerScope::runScope($this, $scope)"
                ],
                "context_line": "                : $scope($this);",
                "post_context": [
                  "        } finally {",
                  "            foreach ($previous as $alias => $resolver) {",
                  "                $binds[$alias] = $resolver;",
                  "            }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "lineno": 31,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Telemetry/src/AbstractTracer.php",
                "function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "raw_function": "Spiral\\Telemetry\\AbstractTracer::Spiral\\Telemetry\\{closure}",
                "pre_context": [
                  "    final protected function runScope(Span $span, callable $callback): mixed",
                  "    {",
                  "        return $this->scope->runScope([",
                  "            SpanInterface::class => $span,",
                  "            TracerInterface::class => $this,"
                ],
                "context_line": "        ], static fn (InvokerInterface $invoker): mixed => $invoker->invoke($callback));",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 212,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::invoke",
                "raw_function": "Spiral\\Core\\Container::invoke",
                "pre_context": [
                  "    /**",
                  "     * @psalm-param TInvokable $target",
                  "     */",
                  "    public function invoke(mixed $target, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->invoker->invoke($target, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * Bind class or class interface to the injector source (InjectorInterface).",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "lineno": 73,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Invoker.php",
                "function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "raw_function": "Spiral\\Core\\Internal\\Invoker::invoke",
                "pre_context": [
                  "                throw new ContainerException($e->getMessage(), $e->getCode(), $e);",
                  "            }",
                  "",
                  "            // Invoking Closure with resolved arguments",
                  "            return $reflection->invokeArgs("
                ],
                "context_line": "                $this->resolver->resolveArguments($reflection, $parameters)",
                "post_context": [
                  "            );",
                  "        }",
                  "",
                  "        throw new NotCallableException('Unsupported callable.');",
                  "    }"
                ]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionFunction::invokeArgs",
                "raw_function": "ReflectionFunction::invokeArgs"
              },
              {
                "filename": "/vendor/spiral/framework/src/Router/src/CoreHandler.php",
                "lineno": 96,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Router/src/CoreHandler.php",
                "function": "Spiral\\Router\\CoreHandler::Spiral\\Router\\{closure}",
                "raw_function": "Spiral\\Router\\CoreHandler::Spiral\\Router\\{closure}",
                "pre_context": [
                  "                fn () => $this->tracer->trace(",
                  "                    name: \\sprintf('Controller [%s:%s]', $this->controller, $action),",
                  "                    callback: fn () => $this->core->callAction(",
                  "                        controller: $this->controller,",
                  "                        action: $action,"
                ],
                "context_line": "                        parameters: $this->parameters",
                "post_context": [
                  "                    ),",
                  "                    attributes: [",
                  "                        'route.controller' => $this->controller,",
                  "                        'route.action' => $action,",
                  "                        'route.parameters' => \\array_keys($this->parameters),"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Hmvc/src/InterceptableCore.php",
                "lineno": 30,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Hmvc/src/InterceptableCore.php",
                "function": "Spiral\\Core\\InterceptableCore::callAction",
                "raw_function": "Spiral\\Core\\InterceptableCore::callAction",
                "pre_context": [
                  "        $this->pipeline->addInterceptor($interceptor);",
                  "    }",
                  "",
                  "    public function callAction(string $controller, string $action, array $parameters = []): mixed",
                  "    {"
                ],
                "context_line": "        return $this->pipeline->withCore($this->core)->callAction($controller, $action, $parameters);",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Hmvc/src/InterceptorPipeline.php",
                "lineno": 60,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Hmvc/src/InterceptorPipeline.php",
                "function": "Spiral\\Core\\InterceptorPipeline::callAction",
                "raw_function": "Spiral\\Core\\InterceptorPipeline::callAction",
                "pre_context": [
                  "                action: $action,",
                  "                parameters: $parameters,",
                  "                interceptor: $interceptor",
                  "            ));",
                  ""
                ],
                "context_line": "            return $interceptor->process($controller, $action, $parameters, $this);",
                "post_context": [
                  "        }",
                  "",
                  "        return $this->core->callAction($controller, $action, $parameters);",
                  "    }",
                  "}"
                ]
              },
              {
                "filename": "/vendor/spiral/filters-bridge/src/Interceptor/FilterInterceptor.php",
                "lineno": 51,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/filters-bridge/src/Interceptor/FilterInterceptor.php",
                "function": "Spiral\\Filters\\Interceptor\\FilterInterceptor::process",
                "raw_function": "Spiral\\Filters\\Interceptor\\FilterInterceptor::process",
                "pre_context": [
                  "            }",
                  "",
                  "            $parameters[$parameter] = $filter;",
                  "        }",
                  ""
                ],
                "context_line": "        return $core->callAction($controller, $action, $parameters);",
                "post_context": [
                  "    }",
                  "",
                  "    /**",
                  "     * @throws InvalidFilterException",
                  "     */"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Hmvc/src/InterceptorPipeline.php",
                "lineno": 63,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Hmvc/src/InterceptorPipeline.php",
                "function": "Spiral\\Core\\InterceptorPipeline::callAction",
                "raw_function": "Spiral\\Core\\InterceptorPipeline::callAction",
                "pre_context": [
                  "            ));",
                  "",
                  "            return $interceptor->process($controller, $action, $parameters, $this);",
                  "        }",
                  ""
                ],
                "context_line": "        return $this->core->callAction($controller, $action, $parameters);",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Hmvc/src/AbstractCore.php",
                "lineno": 72,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Hmvc/src/AbstractCore.php",
                "function": "Spiral\\Core\\AbstractCore::callAction",
                "raw_function": "Spiral\\Core\\AbstractCore::callAction",
                "pre_context": [
                  "",
                  "        $container = $this->container;",
                  "        return ContainerScope::runScope(",
                  "            $container,",
                  "            static fn () => $method->invokeArgs($container->get($controller), $args)"
                ],
                "context_line": "        );",
                "post_context": ["    }", "}", ""]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/ContainerScope.php",
                "lineno": 37,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/ContainerScope.php",
                "function": "Spiral\\Core\\ContainerScope::runScope",
                "raw_function": "Spiral\\Core\\ContainerScope::runScope",
                "pre_context": [
                  "    public static function runScope(ContainerInterface $container, callable $scope): mixed",
                  "    {",
                  "        [$previous, self::$container] = [self::$container, $container];",
                  "",
                  "        try {"
                ],
                "context_line": "            return $scope(self::$container);",
                "post_context": [
                  "        } finally {",
                  "            self::$container = $previous;",
                  "        }",
                  "    }",
                  "}"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Hmvc/src/AbstractCore.php",
                "lineno": 71,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Hmvc/src/AbstractCore.php",
                "function": "Spiral\\Core\\AbstractCore::Spiral\\Core\\{closure}",
                "raw_function": "Spiral\\Core\\AbstractCore::Spiral\\Core\\{closure}",
                "pre_context": [
                  "        }",
                  "",
                  "        $container = $this->container;",
                  "        return ContainerScope::runScope(",
                  "            $container,"
                ],
                "context_line": "            static fn () => $method->invokeArgs($container->get($controller), $args)",
                "post_context": ["        );", "    }", "}", ""]
              },
              {
                "filename": "[internal]",
                "lineno": 0,
                "in_app": false,
                "function": "ReflectionMethod::invokeArgs",
                "raw_function": "ReflectionMethod::invokeArgs"
              },
              {
                "filename": "/app/src/Controller/HomeController.php",
                "lineno": 75,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/app/src/Controller/HomeController.php",
                "function": "App\\Controller\\HomeController::exception",
                "raw_function": "App\\Controller\\HomeController::exception",
                "pre_context": [
                  "        $logger->info('Test', ['foo' => 'bar']);",
                  "    }",
                  "",
                  "    public function exception(): void",
                  "    {"
                ],
                "context_line": "        $this->container->get('foo');",
                "post_context": [
                  "    }",
                  "",
                  "    public function ping(): string",
                  "    {",
                  "        $jobID = $this->queue->push(Ping::class, ["
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Container.php",
                "lineno": 136,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Container.php",
                "function": "Spiral\\Core\\Container::get",
                "raw_function": "Spiral\\Core\\Container::get",
                "pre_context": [
                  "     *",
                  "     * @psalm-suppress PossiblyInvalidArgument, PossiblyInvalidCast",
                  "     */",
                  "    public function get(string|Autowire $id, string $context = null): mixed",
                  "    {"
                ],
                "context_line": "        return $this->container->get($id, $context);",
                "post_context": [
                  "    }",
                  "",
                  "    public function has(string $id): bool",
                  "    {",
                  "        return $this->container->has($id);"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Container.php",
                "lineno": 55,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Container.php",
                "function": "Spiral\\Core\\Internal\\Container::get",
                "raw_function": "Spiral\\Core\\Internal\\Container::get",
                "pre_context": [
                  "    {",
                  "        if ($id instanceof Autowire) {",
                  "            return $id->resolve($this->factory);",
                  "        }",
                  ""
                ],
                "context_line": "        return $this->factory->make($id, [], $context);",
                "post_context": [
                  "    }",
                  "",
                  "    public function has(string $id): bool",
                  "    {",
                  "        return \\array_key_exists($id, $this->state->bindings);"
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Factory.php",
                "lineno": 61,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Factory.php",
                "function": "Spiral\\Core\\Internal\\Factory::make",
                "raw_function": "Spiral\\Core\\Internal\\Factory::make",
                "pre_context": [
                  "    {",
                  "        if (!isset($this->state->bindings[$alias])) {",
                  "            $this->tracer->push(false, action: 'autowire', alias: $alias, context: $context);",
                  "            try {",
                  "                //No direct instructions how to construct class, make is automatically"
                ],
                "context_line": "                return $this->autowire($alias, $parameters, $context);",
                "post_context": [
                  "            } finally {",
                  "                $this->tracer->pop(false);",
                  "            }",
                  "        }",
                  ""
                ]
              },
              {
                "filename": "/vendor/spiral/framework/src/Core/src/Internal/Factory.php",
                "lineno": 134,
                "in_app": true,
                "abs_path": "/root/repos/spiral-apps/filters-bridge/vendor/spiral/framework/src/Core/src/Internal/Factory.php",
                "function": "Spiral\\Core\\Internal\\Factory::autowire",
                "raw_function": "Spiral\\Core\\Internal\\Factory::autowire",
                "pre_context": [
                  "     * @throws \\Throwable",
                  "     */",
                  "    private function autowire(string $class, array $parameters, string $context = null): object",
                  "    {",
                  "        if (!\\class_exists($class) && !isset($this->state->injectors[$class])) {"
                ],
                "context_line": "            throw new NotFoundException($this->tracer->combineTraceMessage(\\sprintf(",
                "post_context": [
                  "                'Can\\'t resolve `%s`: undefined class or binding `%s`.',",
                  "                $this->tracer->getRootAlias(),",
                  "                $class",
                  "            )));",
                  "        }"
                ]
              }
            ]
          },
          "mechanism": { "type": "generic", "handled": true }
        }
      ]
    }
  },
  "timestamp": 1673266950,
  "project_id": null
}
